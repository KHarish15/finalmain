version: 2.1

jobs:
  test-and-analyze:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            pip install requests pytest
      - run:
          name: Run tests and analyze with AI
          command: |
            # Create a simple test script
            cat > test_script.py << 'EOF'
            import requests
            import json
            import os
            
            # Simulate test results (replace with your actual tests)
            test_results = {
                "status": "completed",
                "passed": 5,
                "failed": 2,
                "logs": "Test logs would go here..."
            }
            
            # Call your Agentic AI API (replace with your actual API endpoint)
            try:
                ai_response = requests.post(
                    'https://your-backend.onrender.com/analyze-logs',
                    json={'test_results': test_results},
                    timeout=30
                )
                ai_analysis = ai_response.json()
            except Exception as e:
                ai_analysis = {"error": str(e), "analysis": "AI analysis failed"}
            
            # Post to Confluence (replace with your actual Confluence API)
            try:
                confluence_data = {
                    'space_key': 'TEST',
                    'page_title': 'Test Results - CircleCI',
                    'content': f"""
                    ## Test Results Summary
                    - Passed: {test_results['passed']}
                    - Failed: {test_results['failed']}
                    
                    ## AI Analysis
                    {ai_analysis.get('analysis', 'No analysis available')}
                    
                    Generated by CircleCI
                    """
                }
                requests.post(
                    'https://your-backend.onrender.com/save-to-confluence',
                    json=confluence_data,
                    timeout=30
                )
                print("✅ Posted to Confluence successfully")
            except Exception as e:
                print(f"❌ Failed to post to Confluence: {e}")
            
            print("🎉 Test and analysis completed!")
            EOF
            
            python test_script.py
      - store_artifacts:
          path: test_script.py
          destination: test-artifacts

workflows:
  version: 2
  test-workflow:
    jobs:
      - test-and-analyze 